version: 2.1
executors:
  arm64_executor:
    machine:
      image: ubuntu-2204:current
    resource_class: arm.medium
    environment:
      DOCKER_IMAGE: vercel-cli
      NODE_VERSION: 20.10.0
      NPM_VERSION: 10.2.5
      VERCEL_CLI_VERION: 32.7.2
      BINFMT_VERSION: qemu-v8.1.5-43
  amd64_executor:
    machine:
      image: ubuntu-2204:current
    resource_class: medium
    environment:
      DOCKER_IMAGE: vercel-cli
      ALPINE_VERSION: 3.19.0
      NODE_VERSION: 20.10.0
      NPM_VERSION: 10.2.5
      VERCEL_CLI_VERION: 32.7.2
      BINFMT_VERSION: qemu-v8.1.5-43
      DELETE_TAG_TAG: 1.0.2
jobs:
  build_and_test_amd64:
    executor: amd64_executor
    steps:
      - checkout
      - run:
          name: "Build image and test"
          command: |
            docker build \
            --build-arg NODE_VERSION=$NODE_VERSION \
            --build-arg NPM_VERSION=$NPM_VERSION \
            --build-arg VERCEL_CLI_VERSION=$VERCEL_CLI_VERSION \
            --tag $DOCKER_LOGIN/$DOCKER_IMAGE:test \
            --file dockerfiles/production/Dockerfile \
            "."
      - run:
          name: "Test image"
          command: |
            docker run --rm $DOCKER_LOGIN/$DOCKER_IMAGE:test cat /etc/os-release | grep "Alpine Linux"
            docker run --rm $DOCKER_LOGIN/$DOCKER_IMAGE:test cat /etc/os-release | grep $ALPINE_VERSION
            docker run --rm $DOCKER_LOGIN/$DOCKER_IMAGE:test node -v | grep $NODE_VERSION
            docker run --rm $DOCKER_LOGIN/$DOCKER_IMAGE:test npm -v | grep $NPM_VERSION
            docker run --rm $DOCKER_LOGIN/$DOCKER_IMAGE:test vercel -v | grep $VERCEL_CLI_VERSION
  build_arm64:
    executor: arm64_executor
    steps:
      - checkout
      - run:
          name: "Login to Docker HUB"
          command: docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
      - run:
          name: "Install tonistiigi/binfmt"
          command: docker run --rm --privileged tonistiigi/binfmt:$BINFMT_VERSION --install all
      - run:
          name: "Create buildx multiarch"
          command: |
            docker buildx create \
            --name multiarch \
            --use \
            && docker buildx inspect \
            --bootstrap \
            --builder \
            multiarch
      - run:
          name: "Build image and push to Docker HUB"
          command: |
            docker buildx build \
              --cache-to=type=inline \
              --platform linux/arm64,linux/arm/v6,linux/arm/v7 \
              --build-arg NODE_VERSION=$NODE_VERSION \
              --build-arg NPM_VERSION=$NPM_VERSION \
              --build-arg VERCEL_CLI_VERSION=$VERCEL_CLI_VERSION \
              --tag $DOCKER_LOGIN/$DOCKER_IMAGE:cache-arm \
              --file dockerfiles/production/Dockerfile \
              --push \
              '.'
  build_amd64:
    executor: amd64_executor
    steps:
      - checkout
      - run:
          name: "Login to Docker HUB"
          command: docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
      - run:
          name: "Install tonistiigi/binfmt"
          command: docker run --rm --privileged tonistiigi/binfmt:$BINFMT_VERSION --install all
      - run:
          name: "Create buildx multiarch"
          command: |
            docker buildx create \
            --name multiarch \
            --use \
            && docker buildx inspect \
            --bootstrap \
            --builder \
            multiarch
      - run:
          name: "Build image and push to Docker HUB"
          command: |
            docker buildx build \
            --cache-from type=registry,ref=$DOCKER_LOGIN/$DOCKER_IMAGE:cache-arm \
            --platform linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7 \
            --build-arg NODE_VERSION=$NODE_VERSION \
            --build-arg NPM_VERSION=$NPM_VERSION \
            --build-arg VERCEL_CLI_VERSION=$VERCEL_CLI_VERSION \
            --tag $DOCKER_LOGIN/$DOCKER_IMAGE:$CIRCLE_TAG \
            --tag $DOCKER_LOGIN/$DOCKER_IMAGE:latest \
            --file dockerfiles/production/Dockerfile \
            --push \
            "."
  delete_cache_arm:
    executor: amd64_executor
    steps:
      - run:
          name: "Login to Docker HUB"
          command: docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
      - run:
          name: "Remove cache arm image"
          command: |
            docker run \
            -it \
            --rm \
            --name $DOCKER_IMAGE \
            -e DOCKER_USERNAME=$DOCKER_LOGIN \
            -e DOCKER_PASSWORD=$DOCKER_PASSWORD \
            -e ORGANIZATION=$DOCKER_LOGIN \
            -e IMAGE=$DOCKER_IMAGE \
            -e TAG=cache-arm \
            $DOCKER_LOGIN/delete-tag:$DELETE_TAG_TAG
workflows:
  test_and_build_images:
    jobs:
      - build_and_test_amd64
          #context: SECRETS
          #filters:
          #  branches:
          #    only:
          #      - master
      - build_arm64:
          context: SECRETS
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - build_amd64:
          context: SECRETS
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
          requires:
            - build_arm64
      - delete_cache_arm:
          context: SECRETS
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
          requires:
            - build_amd64
